<project name="FTO-BG" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">



	<!-- ===================== Property Definitions =========================== -->


	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- ==================== File and Directory Names ======================== -->

	<!-- override app.name and app.version in build.properties file -->
	<property name="app.name" value="MDS-Portal" />
	<property name="app.name.dist" value="MDS-Portal" />
	<property name="app.version" value="0.1" />

	<property name="app.path" value="/${app.name}" />

	<property name="app.home" value="${APP_HOME}" />

	<property name="build.home" value="${app.home}/www/WEB-INF" />
	<!-- distro is now a symbolic link to ../distro -->
	<property name="dist.home" value="${app.home}/distro" />
	<property name="docs.home" value="${app.home}/docs" />
	<property name="src.home" value="${app.home}/src" />
	<property name="rsrc.home" value="${app.home}/rsrc" />
	<property name="lib.home" value="${app.home}/www/WEB-INF/lib" />
	<property name="ctp_library.home" value="${app.home}/www/CTP-Library" />

	<!--<property name="catalina.home" value="/usr/tomcat" />-->
	<property name="catalina.home" value="${TOMCAT_HOME}" />


	<property name="app.js.home" value="${app.home}/www/js" />
	<property name="app.cjs.cjs" value="${js.home}/cjs" />



	<property name="CTP.5.src" value="${app.home}/CTP.5/src" /> 
	<property name="CTP.5.rsrc" value="${app.home}/CTP.5/rsrc" /> 

        <property name="eFast.src" value="${app.home}/submod/java-efast/src"/>


	<!-- ==================== Compilation Control Options ==================== -->

	<!-- These properties control option settings on the Javac compiler when 
		it is invoked using the <javac> task. compile.debug Should compilation include 
		the debug option? compile.deprecation Should compilation include the deprecation 
		option? compile.optimize Should compilation include the optimize option? -->

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="false" />



	<!-- ==================== External Dependencies =========================== -->


	<!-- Use property values to define the locations of external JAR files on 
		which your application will depend. In general, these values will be used 
		for two purposes: * Inclusion on the classpath that is passed to the Javac 
		compiler * Being copied into the "/WEB-INF/lib" directory during execution 
		of the "deploy" target. Because we will automatically include all of the 
		Java classes that Tomcat 4 exposes to web applications, we will not need 
		to explicitly list any of those dependencies. You only need to worry about 
		external dependencies for JAR files that you are going to include inside 
		your "/WEB-INF/lib" directory. -->

	<!-- Dummy external dependency -->
	<!-- <property name="foo.jar" value="/path/to/foo.jar"/> -->

	<!-- ==================== Compilation Classpath =========================== -->

	<!-- Rather than relying on the CLASSPATH environment variable, Ant includes 
		features that makes it easy to dynamically construct the classpath you need 
		for each compilation. The example below constructs the compile classpath 
		to include the servlet.jar file, as well as the other components that Tomcat 
		makes available to web applications automatically, plus anything that you 
		explicitly added. -->

	<path id="compile.classpath">

		<!-- Include all JAR files that will be included in /WEB-INF/lib -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<!-- <pathelement location="${foo.jar}"/> -->
		<fileset dir="${app.home}/www/WEB-INF/lib">
			<include name="*.jar" />
			<exclude name="servlet-api*.jar"/>
			<exclude name="javaee*.jar"/>
		</fileset>

		<fileset dir="${catalina.home}/lib">
			<include name="*.jar" />
		</fileset>

		<!-- Include all elements that Tomcat exposes to applications -->
<!--
		<pathelement location="${catalina.home}/common/classes"/> <fileset 
			dir="${catalina.home}/common/endorsed"> <include name="*.jar"/> </fileset> 
			<fileset dir="${catalina.home}/common/lib"> <include name="*.jar"/> </fileset> 
			<pathelement location="${catalina.home}/shared/classes"/> <fileset dir="${catalina.home}/shared/lib"> 
			<include name="*.jar"/> </fileset>
-->

	</path>

	<!-- ==================== Deploy Classes Target ====================================== -->
	<target name="deployClasses">
		<!-- Copy all dist classes into WEB-INF -->
	   <copy todir="${build.home}/classes"> <fileset dir="${dist.home}/classes" includes="**/*.class"/> 
			</copy> 
	</target>


	<!-- ==================== All Target ====================================== -->

	<!-- The "all" target is a shortcut for running the "clean" target followed 
		by the "compile" target, to force a complete recompile. -->

	<target name="all" depends="clean,compile"
		description="Clean build and dist directories, then compile" />



	<!-- ==================== Clean Target ==================================== -->

	<!-- The "clean" target deletes any previous "build" and "dist" directory, 
		so that you can be ensured the application can be built from scratch. -->

	<target name="clean" description="Delete old build and dist directories">

		<delete dir="${build.home}/classes" />
		<!--<delete dir="${dist.home}"/> -->
		<!-- delete the jar file -->
		<delete file="${dist.home}/${app.name}-${app.version}.jar" />
		<!-- delete the war file -->
		<delete file="${dist.home}/${app.name}-${app.version}.war" />

		<!-- Delete old CTP collections -->
		<delete file="${ctp_library.home}/CTP.5.common.zip" />
		<delete file="${ctp_library.home}/FST.zip" />

	</target>



	<!-- ==================== Compile Target ================================== -->

	<!-- The "compile" target transforms source files (from your "src" directory) 
		into object files in the appropriate location in the build directory. This 
		example assumes that you will be including your classes in an unpacked directory 
		hierarchy under "/WEB-INF/classes". -->

	<target name="compile" depends="clean,prepare,copy" description="Compile Java sources">
		<!-- <echo message="${toString:compile.classpath}" /> -->
		<!-- Compile Java classes as necessary -->
		<mkdir dir="${build.home}/classes" />
		<!-- Local App -->
			<!--executable="/usr/bin/javac"-->
		<javac  destdir="${build.home}/classes"

			fork="yes"
			debug="${compile.debug}" deprecation="${compile.deprecation}"
			verbose="no"
			includeAntRuntime="false"
			optimize="${compile.optimize}">
			<!-- <src path="${eFast.src}" /> -->
			<src path="${src.home}" />
			<src path="${CTP.5.src}" />
			<src path="${CTP.5.rsrc}" />
			<!-- <compilerarg value="-Xlint"/> -->


			<!--<include name="**/fst/*" />-->
			<!--<include name="**/efast/QuestionDefaultMgr*"/> -->
			<!-- <include name="**/accolades/NEO" /> -->
			<!-- <include name="**/accolades/*" /> -->

			<exclude name="**/tsars/*" />
			<exclude name="**/tsars/**/*" />
			<exclude name="**/financial/*" />
			<exclude name="**/match/*" />
			<exclude name="**/deprecated/*" />
			<exclude name="**/ClarescoFTPer10.java" />
			<exclude name="**/IssueEvaluator.java" />
			<exclude name="**/FSTResource.java" />
			<exclude name="**/EasyEncrypt.java" />


			<src path="${eFast.src}" />
			<exclude name="**/deprecated/**/*" />

			<!--
			<exclude name="**/marriott/**/*" />
			<exclude name="**/efast/news/*" />
			<exclude name="**/servlet/*" />
			<exclude name="**/standardservlets/*" />
			<exclude name="**/util/*" />
			<exclude name="**/cnit/**/*" />
			<exclude name="**/gis/*" />
			<exclude name="**/taskmanager/*" />
			<exclude name="**/fst/**/*" /> 
			<exclude name="**/android/*" />
			-->

			<classpath refid="compile.classpath" />
		</javac>


	</target>

	<!-- ==================== Copy Target ================================== -->

	<!-- "copy" application resources from various locations. -->
	<target name="copy" depends="">
		<!-- Copy application resources -->

		<copy todir="${build.home}/classes"> 
			<fileset dir="${CTP.5.rsrc}" excludes="**/*.java"/> 
		</copy> 

		<!-- Copy external dependencies as required -->




	</target>


	<!-- ==================== Dist Target ===================================== -->


	<!-- The "dist" target creates a binary distribution of your application 
		in a directory structure ready to be distributed. Note 
		that this target depends on two others: * "compile" so that the entire web 
		application (including external dependencies) will have been assembled * 
		"javadoc" so that the application Javadocs will have been created -->

	<target name="distALL" depends="compile,  distMNews,distMNewsTask"
		description="Create binary distribution of base MNews library">
	</target>

	<target name="distMNews" depends="clean,prepare,copy"
		description="Create binary distribution of base MNews library">
		<!-- NOTE: In a traditional setup, dist would depend on an ant controlled 
			compile, with a prerequisite clean and prepare. However we are using Eclipse 
			to do the cleaning and compiling, with class files being created in WEB-INF/classes. 
			For best integration with CVS, the WEB-INF/classes directory is not torn 
			down by the Eclipse clean action, and so we leave it that way. This ant file 
			mainly used for copy and dist actions. -->


		<copy toDir="${dist.home}/classes">
			<fileset dir="${build.home}/classes" includes="**/*" />
		</copy>


	</target>

	<!-- DIST MNews TASK - only outputs MNews task classes -->

	<target name="distMNewsTask" depends="clean,prepare,copy"
		description="Create binary distribution">
		<!-- dist sub for MNews Task -->

		<property name="subapp.name" value="task" />

		<!-- Create module JARs -->
		<jar jarfile="${dist.home}/${app.name}.${subapp.name}-${app.version}.jar"
			basedir="${build.home}/classes" includes="**/${app.name.dist}/${subapp.name}/*.class"
			excludes="**/_archive/*" />
		<jar jarfile="${dist.home}/${app.name}.${subapp.name}-${app.version}.jar"
			basedir="${src.home}" update="true" includes="**/${app.name.dist}/${subapp.name}/*"
			excludes="**/_archive/*" />

		<!-- Copy additional files to ${dist.home} as necessary -->



	</target>


	<!-- DIST Apache Filters - used for making sure all requests UTF-8 encoded -->
	<target name="distFilters" depends="clean,prepare,copy"
		description="Create binary distribution for Filters">
		<!-- dist sub for filters -->
		<property name="subapp.name" value="filters" />

		<!-- Create App module JARs -->
		<jar jarfile="${dist.home}/${app.name}.${subapp.name}-${app.version}.jar"
			basedir="${build.home}/classes" includes="**/${subapp.name}/*.class"
			excludes="**/_archive/*" />
		<jar jarfile="${dist.home}/${app.name}.${subapp.name}-${app.version}.jar"
			basedir="${src.home}" update="true" includes="**/${subapp.name}/*"
			excludes="**/_archive/*" />

		<!-- copy Dist jars to /lib -->
		<copy todir="${lib.home}">
			<fileset dir="${dist.home}" includes="*.jar" />
		</copy>
	</target>

	<!-- ==================== Javadoc Target ================================== -->

	<!-- The "javadoc" target creates Javadoc API documentation for the Java 
		classes included in your application. Normally, this is only required when 
		preparing a distribution release, but is available as a separate target in 
		case the developer wants to create Javadocs independently. -->

	<target name="javadoc" depends="compile"
		description="Create Javadoc API documentation">

		<mkdir dir="${dist.home}/docs/api" />
		<javadoc sourcepath="${src.home}" destdir="${dist.home}/docs/api"
			packagenames="*">
			<classpath refid="compile.classpath" />
		</javadoc>

		<!-- Copy documentation subdirectories -->
		<!--
		<mkdir dir="${dist.home}/docs" />
		<copy todir="${docs.home}">
			<fileset dir="${dist.home}/docs" />
		</copy>
		-->


	</target>



	<!-- ==================== Prepare Target ================================== -->

	<!-- The "prepare" target is used to create the "build" destination directory, 
		and copy the static contents of your web application to it. If you need to 
		copy static files from external dependencies, you can customize the contents 
		of this task. Normally, this task is executed indirectly when needed. -->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<!-- build controlled by eclipse for this project <mkdir dir="${build.home}"/> 
			<mkdir dir="${build.home}/classes"/> <mkdir dir="${build.home}/classes/${app.name}"/> -->
		<mkdir dir="${build.home}/docs" />
		<mkdir dir="${dist.home}" />


		<!-- Copy static content of this web application -->
		<!-- <copy todir="${build.home}"> <fileset dir="${web.home}"/> </copy> -->


		<!-- Copy static files from external dependencies as needed -->

	</target>

	
	<!--  ============================ IVY Targets ============================== -->
	<property name="lib.dir" value="${lib.home}" />
    <property name="build.lib" value="./lib"/>
    
    <!--  Ivy Bootstrap -->
    <target name="bootstrap" description="Used to install the ivy task jar">
	    <mkdir dir="${user.home}/.ant/lib"/>
	    <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.2.0/ivy-2.2.0.jar"/>
     </target>
    <!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" description="--> retrieve dependencies with ivy" depends="init-ivy">
        <ivy:resolve />
    </target>

    <!-- ================================= 
          target: retrieve
          
          Copy all needed jars to WEB-INF/lib/*.jar
          Copy supporting src and javadoc archives into WEB-INF/lib/javadoc and src
          Copy all needed jars to ~build/lib  for distribution purposes              
         ================================= -->    
    <target name="retrieve" description="retrieve dependencies with ivy" depends="init-ivy, clean-lib">
        <ivy:retrieve type="source,javadoc" conf="dev" pattern="${lib.dir}/[type]/[artifact]-[type]-[revision].[ext]"/>
        <!-- <ivy:retrieve conf="dev" pattern="${lib.dir}/[type]/[artifact]-[revision].[ext]"/> -->
        <ivy:retrieve type="jar,bundle" conf="dev" pattern="${lib.dir}/[artifact]-[revision].[ext]"/>
        <ivy:retrieve type="jar" conf="prod" pattern="${build.lib}/[conf]/[artifact]-[revision].[ext]"/>
        
        <!-- Copy files that can't be located through ivy  -->
        <copy todir="${lib.dir}"> <fileset dir="./no-ivy/" includes="*.jar, *.lic"/> </copy>
        
         
    </target>
    
        <!-- ==================== Ivy Clean Target ==================================== -->

    <!-- The "clean" target deletes any previous jar collections retrieved into WEB-INF/lib -->

	<target name="clean-all" description="wipe the ivy cache">
	       <ivy:cleancache/>
	</target>
	
    <target name="clean-lib" description="Delete binaries in lib directory">

        <!--  TODO -->
        <delete>
             <fileset dir="${lib.dir}" includes="*.jar"/>        
        </delete>

    </target>
    
   <property name="ivy.install.version" value="2.2.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
                         it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

<target name="ivy-report" depends="init-ivy">
    <mkdir dir="report" />
    <ivy:resolve type="${ivy.resolve.types}"/>
    <ivy:report todir="report" />
</target>

</project>
